import java.io.*;
import java.util.*;

// Student class to store individual student data
class Student implements Serializable {
    private String name;
    private Map<String, Integer> subjects = new LinkedHashMap<>();

    public Student(String name) {
        this.name = name;
    }

    public void addSubject(String subject, int marks) {
        subjects.put(subject, marks);
    }

    public double calculateAverage() {
        if (subjects.isEmpty()) return 0;
        int total = 0;
        for (int marks : subjects.values()) {
            total += marks;
        }
        return total / (double) subjects.size();
    }

    public String getGrade() {
        double avg = calculateAverage();
        if (avg >= 90) return "A";
        if (avg >= 75) return "B";
        if (avg >= 60) return "C";
        if (avg >= 40) return "D";
        return "F";
    }

    public void displayReport() {
        System.out.println("Student: " + name);
        for (Map.Entry<String, Integer> entry : subjects.entrySet()) {
            System.out.println(" - " + entry.getKey() + ": " + entry.getValue());
        }
        System.out.printf("Average: %.2f\n", calculateAverage());
        System.out.println("Grade: " + getGrade());
        System.out.println("-----------------------------");
    }
}

// Main application class
public class StudentGradeManager {
    private static final String FILE_NAME = "students.dat";
    private static List<Student> students = new ArrayList<>();

    public static void main(String[] args) {
        loadFromFile();
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n==== Student Grade Management ====");
            System.out.println("1. Add Student");
            System.out.println("2. View Reports");
            System.out.println("3. Save and Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();  // consume newline

            switch (choice) {
                case 1:
                    addStudent(scanner);
                    break;
                case 2:
                    viewReports();
                    break;
                case 3:
                    saveToFile();
                    System.out.println("Data saved. Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 3);
    }

    // Add a new student
    private static void addStudent(Scanner scanner) {
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();
        Student student = new Student(name);

        while (true) {
            System.out.print("Enter subject (or 'done' to finish): ");
            String subject = scanner.nextLine();
            if (subject.equalsIgnoreCase("done")) break;

            System.out.print("Enter marks for " + subject + ": ");
            int marks = scanner.nextInt();
            scanner.nextLine();  // consume newline
            student.addSubject(subject, marks);
        }

        students.add(student);
        System.out.println("Student added successfully.");
    }

    // Display all student reports
    private static void viewReports() {
        if (students.isEmpty()) {
            System.out.println("No student data available.");
        } else {
            for (Student s : students) {
                s.displayReport();
            }
        }
    }

    // Save students to file
    private static void saveToFile() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            out.writeObject(students);
        } catch (IOException e) {
            System.out.println("Error saving data: " + e.getMessage());
        }
    }

    // Load students from file
    @SuppressWarnings("unchecked")
    private static void loadFromFile() {
        File file = new File(FILE_NAME);
        if (!file.exists()) return;

        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {
            students = (List<Student>) in.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading data: " + e.getMessage());
        }
    }
}